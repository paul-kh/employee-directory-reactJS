{"version":3,"sources":["components/SortTable.js","components/FilterTable.js","components/TableHeader.js","components/TableRow.js","data.js","serviceWorker.js","index.js","App.js"],"names":["SortFilterTable","props","className","onChange","target","value","FilterTable","type","checked","TableHeader","TableRow","id","name","role","department","email","employees","Boolean","window","location","hostname","match","ReactDOM","render","useState","sortBy","setSortBy","isFiltered","setIsFiltered","filter","sort","conditionalRender","e","toLocaleLowerCase","search","map","emp","key","sortedArray","a","b","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAIe,SAASA,EAAgBC,GACpC,OACI,yBAAKC,UAAU,mDACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAAf,aAEJ,yBAAKA,UAAU,OACX,yBAAKA,UAAU,SAEX,4BAAQA,UAAU,gBAAgBC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBH,EAAME,SAASC,EAAOC,SAC9E,wCACA,0CACA,oDCZT,SAASC,EAAYL,GAChC,OACI,yBAAKC,UAAU,mDACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,2BACIK,KAAK,WACLF,MAAM,UACNF,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBH,EAAME,SAASC,EAAOI,YAEpD,2BAAON,UAAU,OAAjB,yBCTL,SAASO,EAAYR,GAChC,OACI,yBAAKC,UAAU,wBACX,yBAAKA,UAAU,8CACX,yBAAKA,UAAU,SAAf,MACA,yBAAKA,UAAU,SAAf,QACA,yBAAKA,UAAU,SAAf,QACA,yBAAKA,UAAU,SAAf,cACA,yBAAKA,UAAU,SAAf,YCRD,SAASQ,EAAT,GAA0D,IAAtCC,EAAqC,EAArCA,GAAIC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,WAAYC,EAAS,EAATA,MAC3D,OACI,yBAAKb,UAAU,mBACX,yBAAKA,UAAU,sCACX,yBAAKA,UAAU,SAASS,GACxB,yBAAKT,UAAU,SAASU,GACxB,yBAAKV,UAAU,SAASW,GACxB,yBAAKX,UAAU,SAASY,GACxB,yBAAKZ,UAAU,SAASa,KCbjC,IAAMC,EAAY,CACrB,CACI,GAAM,EACN,KAAQ,OACR,WAAc,KACd,KAAQ,UACR,MAAS,qBAEb,CACI,GAAM,EACN,KAAQ,SACR,WAAc,SACd,KAAQ,aACR,MAAS,uBAEb,CACI,GAAM,EACN,KAAQ,SACR,WAAc,cACd,KAAQ,sBACR,MAAS,uBAEb,CACI,GAAM,EACN,KAAQ,OACR,WAAc,cACd,KAAQ,oBACR,MAAS,qBAEb,CACI,GAAM,EACN,KAAQ,QACR,WAAc,QACd,KAAQ,mBACR,MAAS,sBAEb,CACI,GAAM,EACN,KAAQ,SACR,WAAc,QACd,KAAQ,gBACR,MAAS,uBAEb,CACI,GAAM,EACN,KAAQ,UACR,WAAc,YACd,KAAQ,UACR,MAAS,wBAEb,CACI,GAAM,EACN,KAAQ,WACR,WAAc,eACd,KAAQ,oBACR,MAAS,0BC3CGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCSD,WAAgB,IAAD,EACAC,mBAAS,MADT,mBACrBC,EADqB,KACbC,EADa,OAEQF,oBAAS,GAFjB,mBAErBG,EAFqB,KAETC,EAFS,KAI5B,OACE,6BACE,wBAAI1B,UAAU,OAAd,sBAEA,kBAAC,EAAD,CAAWC,SAUf,SAA4BE,GAASqB,EAAUrB,MAT3C,kBAACC,EAAD,CAAaH,SAcjB,SAA2BK,GAAW,OAAiBoB,IAAVpB,MAbzC,kBAACC,EAAD,MAgBJ,WACE,GAAe,OAAXgB,EACF,OAAIE,EAAmBE,IACXC,EAAK,MAEnB,GAAe,SAAXL,EACF,OAAIE,EAAmBE,IACXC,EAAK,QAEnB,GAAe,eAAXL,EACF,OAAIE,EAAmBE,IACXC,EAAK,cA1BhBC,IA+BL,SAASF,IAKP,OADgBb,EAAUa,QAAO,SAAAG,GAAC,OAAIA,EAAEnB,KAAKoB,oBAAoBC,OAAO,YAAc,KACjEC,KAAI,SAAAC,GAAG,OAAI,kBAAC1B,EAAD,CAAUC,GAAIyB,EAAIzB,GAAI0B,IAAKD,EAAIzB,GAAIC,KAAMwB,EAAIxB,KAAMC,KAAMuB,EAAIvB,KAAMC,WAAYsB,EAAItB,WAAYC,MAAOqB,EAAIrB,WAK5I,SAASe,EAAKL,GACZ,IAAIa,EAAc,GAGlB,OAAQb,GACN,IAAK,OACHa,EAActB,EAAUc,MAAK,SAACS,EAAGC,GAAJ,OAAWD,EAAE3B,KAAO4B,EAAE5B,KAAQ,EAAM4B,EAAE5B,KAAO2B,EAAE3B,MAAS,EAAI,KACzF,MACF,IAAK,KACH0B,EAActB,EAAUc,MAAK,SAACS,EAAGC,GAAJ,OAAWD,EAAE5B,GAAK6B,EAAE7B,GAAM,EAAM6B,EAAE7B,GAAK4B,EAAE5B,IAAO,EAAI,KACjF,MACF,IAAK,aACH2B,EAActB,EAAUc,MAAK,SAACS,EAAGC,GAAJ,OAAWD,EAAEzB,WAAa0B,EAAE1B,WAAc,EAAM0B,EAAE1B,WAAayB,EAAEzB,YAAe,EAAI,KAIrH,OAAOwB,EAAYH,KAAI,SAAAC,GAAG,OAAI,kBAAC1B,EAAD,CAAUC,GAAIyB,EAAIzB,GAAI0B,IAAKD,EAAIzB,GAAIC,KAAMwB,EAAIxB,KAAMC,KAAMuB,EAAIvB,KAAMC,WAAYsB,EAAItB,WAAYC,MAAOqB,EAAIrB,cD7E5H,MAAS0B,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b2b597fb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./styles.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default function SortFilterTable(props) {\r\n    return (\r\n        <div className=\"container-fluid bg-lightgray m-0 pt-3 bold-text\">\r\n            <div className=\"row\">\r\n                <div className=\"col-4 mb-1 mx-1\">Sort by </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-4\">\r\n                    {/* raise onChange event to the parent element \"App\" */}\r\n                    <select className=\"form-control \" onChange={({ target }) => props.onChange(target.value)}>\r\n                        <option> ID </option>\r\n                        <option> Name </option>\r\n                        <option> Department </option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    );\r\n}","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default function FilterTable(props) {\r\n    return (\r\n        <div className=\"container-fluid bg-lightgray m-0 pb-3 bold-text\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        value=\"manager\"\r\n                        onChange={({ target }) => props.onChange(target.checked)}\r\n                    />\r\n                    <label className=\"m-1\"> Show only manager</label>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    );\r\n}","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles.css\";\r\n\r\nexport default function TableHeader(props) {\r\n    return (\r\n        <div className=\"container-fluid mt-0\">\r\n            <div className=\"row bold-text bg-lightgreen text-black p-1\">\r\n                <div className=\"col-1\">ID</div>\r\n                <div className=\"col-2\">Name</div>\r\n                <div className=\"col-3\">Role</div>\r\n                <div className=\"col-2\">Department</div>\r\n                <div className=\"col-4\">E-mail</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles.css\";\r\n\r\nexport default function TableRow({ id, name, role, department, email }) {\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row row-border-bottom bg-lightgray\">\r\n                <div className=\"col-1\">{id}</div>\r\n                <div className=\"col-2\">{name}</div>\r\n                <div className=\"col-3\">{role}</div>\r\n                <div className=\"col-2\">{department}</div>\r\n                <div className=\"col-4\">{email}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","export const employees = [\r\n    {\r\n        \"id\": 1,\r\n        \"name\": \"John\",\r\n        \"department\": \"HR\",\r\n        \"role\": \"Manager\",\r\n        \"email\": \"john@fakemail.com\"\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"name\": \"Thomas\",\r\n        \"department\": \"Fiance\",\r\n        \"role\": \"Accountant\",\r\n        \"email\": \"thomas@fakemail.com\"\r\n    },\r\n    {\r\n        \"id\": 3,\r\n        \"name\": \"Robert\",\r\n        \"department\": \"Engineering\",\r\n        \"role\": \"Development Manager\",\r\n        \"email\": \"robert@fakemail.com\"\r\n    },\r\n    {\r\n        \"id\": 4,\r\n        \"name\": \"Paul\",\r\n        \"department\": \"Engineering\",\r\n        \"role\": \"Software Engineer\",\r\n        \"email\": \"paul@fakemail.com\"\r\n    },\r\n    {\r\n        \"id\": 5,\r\n        \"name\": \"Jacob\",\r\n        \"department\": \"Sales\",\r\n        \"role\": \"Sales Specialist\",\r\n        \"email\": \"jacob@fakemail.com\"\r\n    },\r\n    {\r\n        \"id\": 6,\r\n        \"name\": \"Samuel\",\r\n        \"department\": \"Sales\",\r\n        \"role\": \"Sales Manager\",\r\n        \"email\": \"samuel@fakemail.com\"\r\n    },\r\n    {\r\n        \"id\": 7,\r\n        \"name\": \"Danniel\",\r\n        \"department\": \"Marketing\",\r\n        \"role\": \"Manager\",\r\n        \"email\": \"danniel@fakemail.com\"\r\n    },\r\n    {\r\n        \"id\": 8,\r\n        \"name\": \"Emmanuel\",\r\n        \"department\": \"Supply Chain\",\r\n        \"role\": \"warehouse manager\",\r\n        \"email\": \"emmanuel@fakemail.com\"\r\n    }\r\n];","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// *******************************************************************************************************************\n// *** This is the PARENT COMPONENT of 4 children (1. SortTable, 2. FilterTable, 3. TableHeader, and 4. TableRow) ****\n// *******************************************************************************************************************\nimport React, { useState } from 'react';\nimport './App.css';\nimport SortTable from \"./components/SortTable\";\nimport FilterTable from \"./components/FilterTable\";\nimport TableHeader from \"./components/TableHeader\";\nimport TableRow from \"./components/TableRow\";\n\nimport { employees } from \"./data\";\n\n// ********************************\n// *** THE MAIN FUNCTION \"App\" ****\n// ********************************\nexport default function App() {\n  const [sortBy, setSortBy] = useState(\"ID\");\n  const [isFiltered, setIsFiltered] = useState(false);\n\n  return (\n    <div >\n      <h1 className=\"App\">Employee Directory</h1>\n      {/* Handle onChange events raised from the child components \"SortTable\" & \"FilterTable\" */}\n      <SortTable onChange={handleSortOnChange} />\n      <FilterTable onChange={handleFilterCheck} />\n      <TableHeader />\n      {conditionalRender()}\n    </div>\n  );\n\n  // Parent component handles \"onChange\" event raised by child component \"SortTable\"\n  // This is how the parent receives props value from child\n  // It receives value of the select box and update this value in the state\n  function handleSortOnChange(value) { setSortBy(value) }\n\n  // Parent component handles \"onChange\" event raised by child component \"FilterTable\"\n  // This is how the parent receives props value from child\n  // It detects the checkbox status then update the value in the state variable \"isFiltered\"\n  function handleFilterCheck(checked) { return checked ? setIsFiltered(true) : setIsFiltered(false) }\n\n  // Render components dynamically based on conditions of sorting and filtering\n  function conditionalRender() {\n    if (sortBy === \"ID\") {\n      if (isFiltered) return filter()\n      else return sort(\"ID\");\n    }\n    if (sortBy === \"Name\") {\n      if (isFiltered) return filter()\n      else return sort(\"Name\");\n    }\n    if (sortBy === \"Department\") {\n      if (isFiltered) return filter()\n      else return sort(\"Department\");\n    }\n  }\n\n  // Filter by \"manager\". The function returns an array of JSX strings to be rendered\n  function filter() {\n    let filteredArray;\n    // string.search(\"searchWord\") return position of the found word; if not found, it return -1\n    // solution found on w3schools.com: https://www.w3schools.com/jsref/jsref_search.asp\n    filteredArray = employees.filter(e => e.role.toLocaleLowerCase().search(\"manager\") >= 0);\n    return filteredArray.map(emp => <TableRow id={emp.id} key={emp.id} name={emp.name} role={emp.role} department={emp.department} email={emp.email} />);\n  }\n\n  // Sort by value that user selet in the seletion box\n  // The function returns an array of JSX strings\n  function sort(sortBy) {\n    let sortedArray = [];\n    // Solution found on Stack Overflow\n    // https://stackoverflow.com/questions/1129216/sort-array-of-objects-by-string-property-value\n    switch (sortBy) {\n      case \"Name\":\n        sortedArray = employees.sort((a, b) => (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0));\n        break;\n      case \"ID\":\n        sortedArray = employees.sort((a, b) => (a.id > b.id) ? 1 : ((b.id > a.id) ? -1 : 0));\n        break;\n      case \"Department\":\n        sortedArray = employees.sort((a, b) => (a.department > b.department) ? 1 : ((b.department > a.department) ? -1 : 0));\n        break;\n      default:\n    }\n    return sortedArray.map(emp => <TableRow id={emp.id} key={emp.id} name={emp.name} role={emp.role} department={emp.department} email={emp.email} />);\n  }\n}\n\n"],"sourceRoot":""}